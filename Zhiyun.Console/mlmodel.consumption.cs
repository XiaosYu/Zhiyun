// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace Zhiyun_Console
{
    public partial class Mlmodel
    {
        /// <summary>
        /// model input class for Mlmodel.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [LoadColumn(0)]
            [ColumnName(@"elapsed_time")]
            public float Elapsed_time { get; set; }

            [LoadColumn(1)]
            [ColumnName(@"set_no")]
            public float Set_no { get; set; }

            [LoadColumn(2)]
            [ColumnName(@"game_no")]
            public float Game_no { get; set; }

            [LoadColumn(3)]
            [ColumnName(@"point_no")]
            public float Point_no { get; set; }

            [LoadColumn(4)]
            [ColumnName(@"p1_sets")]
            public float P1_sets { get; set; }

            [LoadColumn(5)]
            [ColumnName(@"p2_sets")]
            public float P2_sets { get; set; }

            [LoadColumn(6)]
            [ColumnName(@"p1_games")]
            public float P1_games { get; set; }

            [LoadColumn(7)]
            [ColumnName(@"p2_games")]
            public float P2_games { get; set; }

            [LoadColumn(8)]
            [ColumnName(@"p1_score")]
            public float P1_score { get; set; }

            [LoadColumn(9)]
            [ColumnName(@"p2_score")]
            public float P2_score { get; set; }

            [LoadColumn(10)]
            [ColumnName(@"server")]
            public float Server { get; set; }

            [LoadColumn(11)]
            [ColumnName(@"serve_no")]
            public float Serve_no { get; set; }

            [LoadColumn(12)]
            [ColumnName(@"p1_points_won")]
            public float P1_points_won { get; set; }

            [LoadColumn(13)]
            [ColumnName(@"p2_points_won")]
            public float P2_points_won { get; set; }

            [LoadColumn(14)]
            [ColumnName(@"game_victor")]
            public float Game_victor { get; set; }

            [LoadColumn(15)]
            [ColumnName(@"set_victor")]
            public float Set_victor { get; set; }

            [LoadColumn(16)]
            [ColumnName(@"p1_ace")]
            public float P1_ace { get; set; }

            [LoadColumn(17)]
            [ColumnName(@"p2_ace")]
            public float P2_ace { get; set; }

            [LoadColumn(18)]
            [ColumnName(@"p1_winner")]
            public float P1_winner { get; set; }

            [LoadColumn(19)]
            [ColumnName(@"p2_winner")]
            public float P2_winner { get; set; }

            [LoadColumn(20)]
            [ColumnName(@"winner_shot_type")]
            public float Winner_shot_type { get; set; }

            [LoadColumn(21)]
            [ColumnName(@"p1_double_fault")]
            public float P1_double_fault { get; set; }

            [LoadColumn(22)]
            [ColumnName(@"p2_double_fault")]
            public float P2_double_fault { get; set; }

            [LoadColumn(23)]
            [ColumnName(@"p1_unf_err")]
            public float P1_unf_err { get; set; }

            [LoadColumn(24)]
            [ColumnName(@"p2_unf_err")]
            public float P2_unf_err { get; set; }

            [LoadColumn(25)]
            [ColumnName(@"p1_net_pt")]
            public float P1_net_pt { get; set; }

            [LoadColumn(26)]
            [ColumnName(@"p2_net_pt")]
            public float P2_net_pt { get; set; }

            [LoadColumn(27)]
            [ColumnName(@"p1_net_pt_won")]
            public float P1_net_pt_won { get; set; }

            [LoadColumn(28)]
            [ColumnName(@"p2_net_pt_won")]
            public float P2_net_pt_won { get; set; }

            [LoadColumn(29)]
            [ColumnName(@"p1_break_pt")]
            public float P1_break_pt { get; set; }

            [LoadColumn(30)]
            [ColumnName(@"p2_break_pt")]
            public float P2_break_pt { get; set; }

            [LoadColumn(31)]
            [ColumnName(@"p1_break_pt_won")]
            public float P1_break_pt_won { get; set; }

            [LoadColumn(32)]
            [ColumnName(@"p2_break_pt_won")]
            public float P2_break_pt_won { get; set; }

            [LoadColumn(33)]
            [ColumnName(@"p1_break_pt_missed")]
            public float P1_break_pt_missed { get; set; }

            [LoadColumn(34)]
            [ColumnName(@"p2_break_pt_missed")]
            public float P2_break_pt_missed { get; set; }

            [LoadColumn(35)]
            [ColumnName(@"p1_distance_run")]
            public float P1_distance_run { get; set; }

            [LoadColumn(36)]
            [ColumnName(@"p2_distance_run")]
            public float P2_distance_run { get; set; }

            [LoadColumn(37)]
            [ColumnName(@"rally_count")]
            public float Rally_count { get; set; }

            [LoadColumn(38)]
            [ColumnName(@"speed_mph")]
            public float Speed_mph { get; set; }

            [LoadColumn(39)]
            [ColumnName(@"serve_width")]
            public float Serve_width { get; set; }

            [LoadColumn(40)]
            [ColumnName(@"serve_depth")]
            public float Serve_depth { get; set; }

            [LoadColumn(41)]
            [ColumnName(@"return_depth")]
            public float Return_depth { get; set; }

            [LoadColumn(42)]
            [ColumnName(@"point_vector")]
            public float Point_vector { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for Mlmodel.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"elapsed_time")]
            public float Elapsed_time { get; set; }

            [ColumnName(@"set_no")]
            public float Set_no { get; set; }

            [ColumnName(@"game_no")]
            public float Game_no { get; set; }

            [ColumnName(@"point_no")]
            public float Point_no { get; set; }

            [ColumnName(@"p1_sets")]
            public float P1_sets { get; set; }

            [ColumnName(@"p2_sets")]
            public float P2_sets { get; set; }

            [ColumnName(@"p1_games")]
            public float P1_games { get; set; }

            [ColumnName(@"p2_games")]
            public float P2_games { get; set; }

            [ColumnName(@"p1_score")]
            public float P1_score { get; set; }

            [ColumnName(@"p2_score")]
            public float P2_score { get; set; }

            [ColumnName(@"server")]
            public float Server { get; set; }

            [ColumnName(@"serve_no")]
            public float Serve_no { get; set; }

            [ColumnName(@"p1_points_won")]
            public float P1_points_won { get; set; }

            [ColumnName(@"p2_points_won")]
            public float P2_points_won { get; set; }

            [ColumnName(@"game_victor")]
            public float Game_victor { get; set; }

            [ColumnName(@"set_victor")]
            public float Set_victor { get; set; }

            [ColumnName(@"p1_ace")]
            public float P1_ace { get; set; }

            [ColumnName(@"p2_ace")]
            public float P2_ace { get; set; }

            [ColumnName(@"p1_winner")]
            public float P1_winner { get; set; }

            [ColumnName(@"p2_winner")]
            public float P2_winner { get; set; }

            [ColumnName(@"winner_shot_type")]
            public float Winner_shot_type { get; set; }

            [ColumnName(@"p1_double_fault")]
            public float P1_double_fault { get; set; }

            [ColumnName(@"p2_double_fault")]
            public float P2_double_fault { get; set; }

            [ColumnName(@"p1_unf_err")]
            public float P1_unf_err { get; set; }

            [ColumnName(@"p2_unf_err")]
            public float P2_unf_err { get; set; }

            [ColumnName(@"p1_net_pt")]
            public float P1_net_pt { get; set; }

            [ColumnName(@"p2_net_pt")]
            public float P2_net_pt { get; set; }

            [ColumnName(@"p1_net_pt_won")]
            public float P1_net_pt_won { get; set; }

            [ColumnName(@"p2_net_pt_won")]
            public float P2_net_pt_won { get; set; }

            [ColumnName(@"p1_break_pt")]
            public float P1_break_pt { get; set; }

            [ColumnName(@"p2_break_pt")]
            public float P2_break_pt { get; set; }

            [ColumnName(@"p1_break_pt_won")]
            public float P1_break_pt_won { get; set; }

            [ColumnName(@"p2_break_pt_won")]
            public float P2_break_pt_won { get; set; }

            [ColumnName(@"p1_break_pt_missed")]
            public float P1_break_pt_missed { get; set; }

            [ColumnName(@"p2_break_pt_missed")]
            public float P2_break_pt_missed { get; set; }

            [ColumnName(@"p1_distance_run")]
            public float P1_distance_run { get; set; }

            [ColumnName(@"p2_distance_run")]
            public float P2_distance_run { get; set; }

            [ColumnName(@"rally_count")]
            public float Rally_count { get; set; }

            [ColumnName(@"speed_mph")]
            public float Speed_mph { get; set; }

            [ColumnName(@"serve_width")]
            public float Serve_width { get; set; }

            [ColumnName(@"serve_depth")]
            public float Serve_depth { get; set; }

            [ColumnName(@"return_depth")]
            public float Return_depth { get; set; }

            [ColumnName(@"point_vector")]
            public uint Point_vector { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"PredictedLabel")]
            public float PredictedLabel { get; set; }

            [ColumnName(@"Score")]
            public float[] Score { get; set; }

        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("mlmodel.mlnet");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);


        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }

        /// <summary>
        /// Use this method to predict scores for all possible labels.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static IOrderedEnumerable<KeyValuePair<string, float>> PredictAllLabels(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            var result = predEngine.Predict(input);
            return GetSortedScoresWithLabels(result);
        }

        /// <summary>
        /// Map the unlabeled result score array to the predicted label names.
        /// </summary>
        /// <param name="result">Prediction to get the labeled scores from.</param>
        /// <returns>Ordered list of label and score.</returns>
        /// <exception cref="Exception"></exception>
        public static IOrderedEnumerable<KeyValuePair<string, float>> GetSortedScoresWithLabels(ModelOutput result)
        {
            var unlabeledScores = result.Score;
            var labelNames = GetLabels(result);

            Dictionary<string, float> labledScores = new Dictionary<string, float>();
            for (int i = 0; i < labelNames.Count(); i++)
            {
                // Map the names to the predicted result score array
                var labelName = labelNames.ElementAt(i);
                labledScores.Add(labelName.ToString(), unlabeledScores[i]);
            }

            return labledScores.OrderByDescending(c => c.Value);
        }

        /// <summary>
        /// Get the ordered label names.
        /// </summary>
        /// <param name="result">Predicted result to get the labels from.</param>
        /// <returns>List of labels.</returns>
        /// <exception cref="Exception"></exception>
        private static IEnumerable<string> GetLabels(ModelOutput result)
        {
            var schema = PredictEngine.Value.OutputSchema;

            var labelColumn = schema.GetColumnOrNull("point_vector");
            if (labelColumn == null)
            {
                throw new Exception("point_vector column not found. Make sure the name searched for matches the name in the schema.");
            }

            // Key values contains an ordered array of the possible labels. This allows us to map the results to the correct label value.
            var keyNames = new VBuffer<float>();
            labelColumn.Value.GetKeyValues(ref keyNames);
            return keyNames.DenseValues().Select(x => x.ToString());
        }

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

    }
}
