// This file was auto-generated by ML.NET Model Builder.
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.FastTree;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace Zhiyun_Console
{
    public partial class Mlmodel
    {
        public const string RetrainFilePath =  @"C:\Users\纸鸢\Desktop\Zhiyun\Zhiyun.Console\data.csv";
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader =  true;

         /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader);
        }



        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }


        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"elapsed_time", @"elapsed_time"),new InputOutputColumnPair(@"set_no", @"set_no"),new InputOutputColumnPair(@"game_no", @"game_no"),new InputOutputColumnPair(@"point_no", @"point_no"),new InputOutputColumnPair(@"p1_sets", @"p1_sets"),new InputOutputColumnPair(@"p2_sets", @"p2_sets"),new InputOutputColumnPair(@"p1_games", @"p1_games"),new InputOutputColumnPair(@"p2_games", @"p2_games"),new InputOutputColumnPair(@"p1_score", @"p1_score"),new InputOutputColumnPair(@"p2_score", @"p2_score"),new InputOutputColumnPair(@"server", @"server"),new InputOutputColumnPair(@"serve_no", @"serve_no"),new InputOutputColumnPair(@"p1_points_won", @"p1_points_won"),new InputOutputColumnPair(@"p2_points_won", @"p2_points_won"),new InputOutputColumnPair(@"game_victor", @"game_victor"),new InputOutputColumnPair(@"set_victor", @"set_victor"),new InputOutputColumnPair(@"p1_ace", @"p1_ace"),new InputOutputColumnPair(@"p2_ace", @"p2_ace"),new InputOutputColumnPair(@"p1_winner", @"p1_winner"),new InputOutputColumnPair(@"p2_winner", @"p2_winner"),new InputOutputColumnPair(@"winner_shot_type", @"winner_shot_type"),new InputOutputColumnPair(@"p1_double_fault", @"p1_double_fault"),new InputOutputColumnPair(@"p2_double_fault", @"p2_double_fault"),new InputOutputColumnPair(@"p1_unf_err", @"p1_unf_err"),new InputOutputColumnPair(@"p2_unf_err", @"p2_unf_err"),new InputOutputColumnPair(@"p1_net_pt", @"p1_net_pt"),new InputOutputColumnPair(@"p2_net_pt", @"p2_net_pt"),new InputOutputColumnPair(@"p1_net_pt_won", @"p1_net_pt_won"),new InputOutputColumnPair(@"p2_net_pt_won", @"p2_net_pt_won"),new InputOutputColumnPair(@"p1_break_pt", @"p1_break_pt"),new InputOutputColumnPair(@"p2_break_pt", @"p2_break_pt"),new InputOutputColumnPair(@"p1_break_pt_won", @"p1_break_pt_won"),new InputOutputColumnPair(@"p2_break_pt_won", @"p2_break_pt_won"),new InputOutputColumnPair(@"p1_break_pt_missed", @"p1_break_pt_missed"),new InputOutputColumnPair(@"p2_break_pt_missed", @"p2_break_pt_missed"),new InputOutputColumnPair(@"p1_distance_run", @"p1_distance_run"),new InputOutputColumnPair(@"p2_distance_run", @"p2_distance_run"),new InputOutputColumnPair(@"rally_count", @"rally_count"),new InputOutputColumnPair(@"speed_mph", @"speed_mph"),new InputOutputColumnPair(@"serve_width", @"serve_width"),new InputOutputColumnPair(@"serve_depth", @"serve_depth"),new InputOutputColumnPair(@"return_depth", @"return_depth")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"elapsed_time",@"set_no",@"game_no",@"point_no",@"p1_sets",@"p2_sets",@"p1_games",@"p2_games",@"p1_score",@"p2_score",@"server",@"serve_no",@"p1_points_won",@"p2_points_won",@"game_victor",@"set_victor",@"p1_ace",@"p2_ace",@"p1_winner",@"p2_winner",@"winner_shot_type",@"p1_double_fault",@"p2_double_fault",@"p1_unf_err",@"p2_unf_err",@"p1_net_pt",@"p2_net_pt",@"p1_net_pt_won",@"p2_net_pt_won",@"p1_break_pt",@"p2_break_pt",@"p1_break_pt_won",@"p2_break_pt_won",@"p1_break_pt_missed",@"p2_break_pt_missed",@"p1_distance_run",@"p2_distance_run",@"rally_count",@"speed_mph",@"serve_width",@"serve_depth",@"return_depth"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"point_vector",inputColumnName:@"point_vector",addKeyValueAnnotationsAsText:false))      
                                    .Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(binaryEstimator:mlContext.BinaryClassification.Trainers.FastTree(new FastTreeBinaryTrainer.Options(){NumberOfLeaves=121,MinimumExampleCountPerLeaf=20,NumberOfTrees=12,MaximumBinCountPerFeature=91,FeatureFraction=0.71182259333909,LearningRate=0.999999776672986,LabelColumnName=@"point_vector",FeatureColumnName=@"Features"}),labelColumnName: @"point_vector"))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
 }
